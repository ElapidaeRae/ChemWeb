// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  username       String?
  password       String
  createdmethods Method[]
  allowedmethods Method[]      @relation("AllowedUsers")
  createdat      DateTime      @default(now())
  role           String        @default("user")
  profile        Profile?
  settings       UserSettings?
  Comment        Comment[]
}

model Method {
  id              String        @id @default(cuid())
  creator         User          @relation(fields: [userId], references: [id])
  userId          String
  allowedusers    User[]        @relation("AllowedUsers")
  name            String
  description     String?
  public          Boolean       @default(false)
  steps           Step[]
  original        Boolean       @default(true)
  MethodDetails   MethodDetails @relation(fields: [methodDetailsId], references: [id])
  methodDetailsId String        @unique
  Forks           Fork[]
  Comment         Comment[]
  Fork            Fork[]        @relation("Parent")
  ForkChild       Fork[]        @relation("Child")
}

model Fork {
  id       String  @id @default(cuid())
  parent   Method  @relation(fields: [parentId], references: [id], name: "Parent")
  parentId String
  child    Method  @relation(fields: [childId], references: [id], name: "Child")
  childId  String
  Method   Method? @relation(fields: [methodId], references: [id])
  methodId String?
}

model MethodDetails {
  id        String    @id @default(cuid())
  createdat DateTime  @default(now())
  tags      Tag[]
  likes     Int       @default(0)
  comments  Comment[]
  Method    Method?
}

model Step {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  createdat   DateTime @default(now())
  method      Method   @relation(fields: [methodId], references: [id])
  methodId    String
}

model Profile {
  id     String  @id @default(cuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  name   String?
  bio    String?
  avatar String?
  badges Badge[]
}

model Tag {
  id              String         @id @default(cuid())
  name            String         @unique
  MethodDetails   MethodDetails? @relation(fields: [methodDetailsId], references: [id])
  methodDetailsId String?
}

model Badge {
  name     String    @id @unique
  users    Profile[]
  criteria String
}

model UserSettings {
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  defaultPrivacy String @default("private")
}

model Comment {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  method          Method         @relation(fields: [methodId], references: [id])
  methodId        String
  content         String
  createdat       DateTime       @default(now())
  likes           Int            @default(0)
  MethodDetails   MethodDetails? @relation(fields: [methodDetailsId], references: [id])
  methodDetailsId String?
}
