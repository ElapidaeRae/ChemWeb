datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// This is your Prisma schema file,
// learn more about it in the docs: https://www.prisma.io/docs/orm/prisma-schema/

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  username       String?
  password       String
  createdmethods Method[]      @relation(name: "MethodToUser")
  createdat      DateTime      @default(now())
  role           String        @default("user")
  profile        Profile?      @relation(name: "ProfileToUser")
  settings       UserSettings? @relation(name: "UserToUserSettings")
  Comment        Comment[]     @relation(name: "CommentToUser")
}

model Method {
  id              String         @id @default(cuid())
  creator         User[]         @relation(name: "MethodToUser")
  name            String
  description     String?
  public          Boolean        @default(false)
  steps           Step[]         @relation(name: "MethodToStep")
  original        Boolean        @default(true)
  MethodDetails   MethodDetails  @relation(name: "MethodToMethodDetails", fields: [methodDetailsId], references: [id])
  methodDetailsId String         @unique
  Comment         Comment[]      @relation(name: "CommentToMethod")
  methoddetailsId String?
  forks           MethodDetails? @relation(name: "MethodToMethodDetailsforks", fields: [methoddetailsId], references: [id])
}

model MethodDetails {
  id        String   @id @default(cuid())
  createdat DateTime @default(now())
  tags      Tag[]    @relation(name: "MethodDetailsToTag")
  likes     Int      @default(0)
  Method    Method?  @relation(name: "MethodToMethodDetails")
  forks     Method[] @relation(name: "MethodToMethodDetailsforks")
}

model Step {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  createdat   DateTime @default(now())
  method      Method   @relation(name: "MethodToStep", fields: [methodId], references: [id])
  methodId    String
}

model Profile {
  id     String  @id @default(cuid())
  user   User    @relation(name: "ProfileToUser", fields: [userId], references: [id])
  userId String  @unique
  bio    String?
  avatar Bytes?
  badges Badge[] @relation(name: "BadgeToProfile")
}

model Tag {
  id              String         @id @default(cuid())
  name            String         @unique
  MethodDetails   MethodDetails? @relation(name: "MethodDetailsToTag", fields: [methodDetailsId], references: [id])
  methodDetailsId String?
}

model Badge {
  name        String    @id @default(cuid())
  users       Profile[] @relation(name: "BadgeToProfile")
  description String    @unique
}

model UserSettings {
  user    User     @relation(name: "UserToUserSettings", fields: [userId], references: [id])
  userId  String   @unique
  private Boolean? @default(false)
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(name: "CommentToUser", fields: [userId], references: [id])
  userId    String
  method    Method   @relation(name: "CommentToMethod", fields: [methodId], references: [id])
  methodId  String
  content   String
  createdat DateTime @default(now())
  likes     Int      @default(0)
}
