generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  username       String?
  password       String
  createdat      DateTime      @default(now())
  role           String        @default("user")
  Comment        Comment[]     @relation("CommentToUser")
  Profile        Profile?      @relation("ProfileToUser")
  Settings       UserSettings? @relation("UserToUserSettings")
  Createdmethods Method[]      @relation("MethodToUser")
}

model Method {
  id              String         @id @default(cuid())
  name            String
  description     String?
  ingredients     String?
  public          Boolean        @default(false)
  original        Boolean        @default(true)
  methodDetailsId String         @unique
  methodforkid    String?
  Comment         Comment[]      @relation("CommentToMethod")
  Forks           MethodDetails? @relation("MethodToMethodDetailsforks", fields: [methodforkid], references: [id])
  MethodDetails   MethodDetails  @relation("MethodToMethodDetails", fields: [methodDetailsId], references: [id])
  Steps           Step[]         @relation("MethodToStep")
  Creator         User           @relation("MethodToUser", fields: [userId], references: [id])
  userId          String
}

model MethodDetails {
  id             String   @id @default(cuid())
  createdat      DateTime @default(now())
  likes          Int      @default(0)
  Forks          Method[] @relation("MethodToMethodDetailsforks")
  Method         Method?  @relation("MethodToMethodDetails")
  Tags           Tag[]    @relation("MethodDetailsToTag")
  CarouselImages Image[]  @relation("ImagesToMethodDetails")
}

model Step {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  createdat   DateTime @default(now())
  methodId    String
  Method      Method   @relation("MethodToStep", fields: [methodId], references: [id])
}

model Profile {
  id     String  @id @default(cuid())
  userId String  @unique
  bio    String?
  avatar Bytes?
  User   User    @relation("ProfileToUser", fields: [userId], references: [id])
  Badges Badge[] @relation("BadgeToProfile")
}

model Tag {
  id              String         @id @default(cuid())
  name            String         @unique
  methodDetailsId String?
  MethodDetails   MethodDetails? @relation("MethodDetailsToTag", fields: [methodDetailsId], references: [id])
}

model Badge {
  name        String    @id @default(cuid())
  description String    @unique
  Users       Profile[] @relation("BadgeToProfile")
}

model UserSettings {
  userId        String   @unique
  private       Boolean? @default(false)
  loginduration Int?     @default(72)
  User          User     @relation("UserToUserSettings", fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  methodId  String
  content   String
  createdat DateTime @default(now())
  likes     Int      @default(0)
  Method    Method   @relation("CommentToMethod", fields: [methodId], references: [id])
  User      User     @relation("CommentToUser", fields: [userId], references: [id])
}

model Image {
  id              String        @id @default(cuid())
  url             String?
  raw             Bytes?
  alt             String?
  methodDetailsId String
  MethodDetails   MethodDetails @relation("ImagesToMethodDetails", fields: [methodDetailsId], references: [id])
}
